diff -Nur a/xbmc/windowing/egl/EGLNativeTypeSunxi.cpp b/xbmc/windowing/egl/EGLNativeTypeSunxi.cpp
--- a/xbmc/windowing/egl/EGLNativeTypeSunxi.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/windowing/egl/EGLNativeTypeSunxi.cpp	2015-11-23 19:48:17.216865199 +0100
@@ -0,0 +1,539 @@
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeTypeSunxi.h"
+#include "guilib/gui3d.h"
+#include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"
+#include "utils/log.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <linux/fb.h>
+#include <sys/ioctl.h>
+#include <EGL/egl.h>
+#include "sunxi_display2.h"
+
+#define SCREENID 0
+
+//fixme
+#ifndef _FBDEV_WINDOW_H_
+#define _FBDEV_WINDOW_H_
+typedef struct fbdev_window
+{
+  unsigned short width;
+  unsigned short height;
+} fbdev_window;
+#endif
+
+#if 0
+static const unsigned long supportedModes[] = 
+{
+  DISP_TV_MOD_480I,
+  DISP_TV_MOD_576I,
+  DISP_TV_MOD_480P,
+  DISP_TV_MOD_576P,
+  DISP_TV_MOD_720P_50HZ,
+  DISP_TV_MOD_720P_60HZ,
+  DISP_TV_MOD_1080I_50HZ,
+  DISP_TV_MOD_1080I_60HZ,
+  DISP_TV_MOD_1080P_24HZ,
+  DISP_TV_MOD_1080P_50HZ,
+  DISP_TV_MOD_1080P_60HZ,
+  DISP_TV_MOD_1080P_25HZ,
+  DISP_TV_MOD_1080P_30HZ,
+};
+#endif
+
+CEGLNativeTypeSunxi::CEGLNativeTypeSunxi() :
+m_disp(-1)
+{
+  const char *env_framebuffer = getenv("FRAMEBUFFER");
+
+  // default to framebuffer 0
+  m_framebuffer_name = "fb0";
+  if (env_framebuffer)
+  {
+    std::string framebuffer(env_framebuffer);
+    std::string::size_type start = framebuffer.find("fb");
+    m_framebuffer_name = framebuffer.substr(start);
+  }
+  m_nativeWindow = NULL;
+}
+
+CEGLNativeTypeSunxi::~CEGLNativeTypeSunxi()
+{
+}
+
+bool CEGLNativeTypeSunxi::CheckCompatibility()
+{
+  std::string name;
+  std::string modalias = "/sys/class/graphics/" + m_framebuffer_name + "/device/modalias";
+
+  SysfsUtils::GetString(modalias, name);
+  StringUtils::Trim(name);
+  if (name == "platform:disp")
+    return true;
+  return false;
+}
+
+void CEGLNativeTypeSunxi::Initialize()
+{
+  unsigned long args[4];
+  
+  if((m_disp = open("/dev/disp", O_RDWR)) == -1)
+  {
+    CLog::Log(LOGERROR, "%s - Can't open display. Nothing will work!\n", __FUNCTION__);
+    return;
+  }
+
+#if 0
+  args[0] = SCREENID;
+  args[1] = 1;
+  args[2] = 0;
+  args[3] = 0;
+  ioctl(m_disp, DISP_VSYNC_EVENT_EN, args);
+#endif
+}
+void CEGLNativeTypeSunxi::Destroy()
+{
+  if(m_disp != -1)
+  {
+    close(m_disp);
+    m_disp = -1;
+  }
+}
+
+bool CEGLNativeTypeSunxi::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::CreateNativeWindow()
+{
+  unsigned long args[4];
+  fbdev_window *nativeWindow = new fbdev_window;
+  
+  if (!nativeWindow)
+    return false;
+  
+  if (m_disp == -1)
+    return false;
+
+  args[0] = SCREENID;
+  args[1] = 0;
+  args[2] = 0;
+  args[3] = 0;
+  nativeWindow->width = ioctl(m_disp, DISP_GET_SCN_WIDTH, args);
+  nativeWindow->height = ioctl(m_disp, DISP_GET_SCN_HEIGHT, args);
+  m_nativeWindow = nativeWindow;
+
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  if (!nativeDisplay)
+    return false;
+  
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  if (!nativeWindow)
+    return false;
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::DestroyNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::DestroyNativeWindow()
+{
+  delete (fbdev_window*)m_nativeWindow, m_nativeWindow = NULL;
+
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  unsigned long args[4];
+  disp_output para;
+  
+  args[0] = SCREENID;
+  args[1] = (unsigned long)(&para);
+  args[2] = 0;
+  args[3] = 0;
+  ioctl(m_disp, DISP_GET_OUTPUT, args);
+  
+  if(!ModeToResolution(para.mode, res))
+    return false;
+ 
+  return res->iWidth > 0 && res->iHeight> 0;
+}
+
+bool CEGLNativeTypeSunxi::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  return false;
+#if 0
+  if (m_nativeWindow)
+  {
+    ((fbdev_window *)m_nativeWindow)->width = res.iScreenWidth;
+    ((fbdev_window *)m_nativeWindow)->height = res.iScreenHeight;
+  }
+
+  switch((int)(0.5 + res.fRefreshRate))
+  {
+    case 60:
+      switch(res.iScreenHeight)
+      {
+        case 480:
+          SetDisplayResolution(DISP_TV_MOD_480I);
+          break;
+        default:
+        case 720:
+          SetDisplayResolution(DISP_TV_MOD_720P_60HZ);
+          break;
+        case 1080:
+          if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+            SetDisplayResolution(DISP_TV_MOD_1080I_60HZ);
+          else
+            SetDisplayResolution(DISP_TV_MOD_1080P_60HZ);
+          break;
+      }
+      break;
+    default:
+    case 50:
+      switch(res.iScreenHeight)
+      {
+        case 576:
+          SetDisplayResolution(DISP_TV_MOD_576I);
+          break;
+        default:
+        case 720:
+          SetDisplayResolution(DISP_TV_MOD_720P_50HZ);
+          break;
+        case 1280:
+          if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+            SetDisplayResolution(DISP_TV_MOD_1080I_50HZ);
+          else
+            SetDisplayResolution(DISP_TV_MOD_1080P_50HZ);
+          break;
+      }
+      break;
+    case 30:
+      switch(res.iScreenHeight)
+      {
+        case 480:
+          SetDisplayResolution(DISP_TV_MOD_480P);
+          break;
+        default:
+        case 1080:
+          SetDisplayResolution(DISP_TV_MOD_1080P_30HZ);
+          break;
+      }
+      break;
+    case 25:
+      switch(res.iScreenHeight)
+      {
+        case 576:
+          SetDisplayResolution(DISP_TV_MOD_576P);
+          break;
+        default:
+        case 1080:
+          SetDisplayResolution(DISP_TV_MOD_1080P_25HZ);
+          break;
+      }
+      break;
+    case 24:
+      SetDisplayResolution(DISP_TV_MOD_1080P_24HZ);
+      break;
+  }
+  
+  return true;
+#endif
+}
+
+bool CEGLNativeTypeSunxi::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  RESOLUTION_INFO res;
+  if(GetNativeResolution(&res))
+    resolutions.push_back(res);
+#if 0
+  for(unsigned int i = 0; i < sizeof(supportedModes) / sizeof(supportedModes[0]); i++)
+  {
+    RESOLUTION_INFO res;
+    //TODO: add hdmi check
+    ModeToResolution(supportedModes[i], &res);
+    resolutions.push_back(res);
+  }
+#endif
+
+  return resolutions.size() > 0;
+}
+
+bool CEGLNativeTypeSunxi::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  return GetNativeResolution(res);
+#if 0
+  // check display/mode, it gets defaulted at boot
+  if (!GetNativeResolution(res))
+  {
+    // put to 720p if we get nothing
+    ModeToResolution(DISP_TV_MOD_720P_50HZ, res);
+  }
+
+  return true;
+#endif
+}
+
+bool CEGLNativeTypeSunxi::ShowWindow(bool show)
+{
+  std::string blank_framebuffer = "/sys/class/graphics/" + m_framebuffer_name + "/blank";
+  SysfsUtils::SetInt(blank_framebuffer.c_str(), show ? 0 : 1);
+  return true;
+}
+
+bool CEGLNativeTypeSunxi::SetDisplayResolution(unsigned int mode)
+{
+  return false;
+#if 0
+  unsigned long args[4];
+  disp_output para;
+  
+  args[0] = SCREENID;
+  args[1] = (unsigned long)(&para);
+  args[2] = 0;
+  args[3] = 0;
+  ioctl(m_disp, DISP_GET_OUTPUT, args);
+  
+  args[0] = SCREENID;
+  args[1] = para.type;
+  args[2] = mode;
+  args[3] = 0;
+  if(ioctl(m_disp, DISP_DEVICE_SWITCH, args) != 0)
+    return false;
+  
+  RESOLUTION_INFO res;
+  ModeToResolution(mode, &res);
+  SetFramebufferResolution(res.iScreenWidth, res.iScreenHeight);
+
+  return true;
+#endif
+}
+
+void CEGLNativeTypeSunxi::SetFramebufferResolution(int width, int height) const
+{
+#if 0
+  int fd0;
+  std::string framebuffer = "/dev/" + m_framebuffer_name;
+
+  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+  {
+    struct fb_var_screeninfo vinfo;
+    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+    {
+      vinfo.xres = width;
+      vinfo.yres = height;
+      vinfo.xres_virtual = width;
+      vinfo.yres_virtual = height * 2;
+      vinfo.bits_per_pixel = 16;
+      vinfo.activate = FB_ACTIVATE_ALL;
+      ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
+    }
+    close(fd0);
+  }
+#endif
+}
+
+bool CEGLNativeTypeSunxi::ModeToResolution(unsigned int mode, RESOLUTION_INFO *res) const
+{
+  
+  if (!res)
+    return false;
+
+  res->iWidth = 0;
+  res->iHeight= 0;
+  
+  switch(mode)
+  {
+    case DISP_TV_MOD_480I:
+      res->iWidth = 720;
+      res->iHeight= 480;
+      res->iScreenWidth = 720;
+      res->iScreenHeight= 480;
+      res->fRefreshRate = 60;
+      res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+      break;
+    case DISP_TV_MOD_576I:
+      res->iWidth = 720;
+      res->iHeight= 576;
+      res->iScreenWidth = 720;
+      res->iScreenHeight= 576;
+      res->fRefreshRate = 50;
+      res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+      break;
+    case DISP_TV_MOD_480P:
+      res->iWidth = 720;
+      res->iHeight= 480;
+      res->iScreenWidth = 720;
+      res->iScreenHeight= 480;
+      res->fRefreshRate = 30;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_576P:
+      res->iWidth = 720;
+      res->iHeight= 576;
+      res->iScreenWidth = 720;
+      res->iScreenHeight= 576;
+      res->fRefreshRate = 25;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_720P_50HZ:
+      res->iWidth = 1280;
+      res->iHeight= 720;
+      res->iScreenWidth = 1280;
+      res->iScreenHeight= 720;
+      res->fRefreshRate = 50;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_720P_60HZ:
+      res->iWidth = 1280;
+      res->iHeight= 720;
+      res->iScreenWidth = 1280;
+      res->iScreenHeight= 720;
+      res->fRefreshRate = 60;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_1080I_50HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 50;
+      res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+      break;
+    case DISP_TV_MOD_1080I_60HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 60;
+      res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+      break;
+    case DISP_TV_MOD_1080P_24HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 24;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_1080P_50HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 50;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_1080P_60HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 60;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_1080P_25HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 25;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_1080P_30HZ:
+      res->iWidth = 1920;
+      res->iHeight= 1080;
+      res->iScreenWidth = 1920;
+      res->iScreenHeight= 1080;
+      res->fRefreshRate = 30;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    /*case DISP_TV_MOD_3840_2160P_30HZ:
+      res->iWidth = 3840;
+      res->iHeight= 2160;
+      res->iScreenWidth = 3840;
+      res->iScreenHeight= 2160;
+      res->fRefreshRate = 30;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_3840_2160P_25HZ:
+      res->iWidth = 3840;
+      res->iHeight= 2160;
+      res->iScreenWidth = 3840;
+      res->iScreenHeight= 2160;
+      res->fRefreshRate = 25;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;
+    case DISP_TV_MOD_3840_2160P_24HZ:
+      res->iWidth = 3840;
+      res->iHeight= 2160;
+      res->iScreenWidth = 3840;
+      res->iScreenHeight= 2160;
+      res->fRefreshRate = 24;
+      res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+      break;*/
+    /*case DISP_TV_MOD_PAL:
+      res->iWidth = 720;
+      res->iHeight= 576;
+      res->iScreenWidth = 720;
+      res->iScreenHeight= 576;
+      res->fRefreshRate = 50;
+      res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+      break;
+    case DISP_TV_MOD_NTSC:
+      res->iWidth = 720;
+      res->iHeight= 480;
+      res->iScreenWidth = 720;
+      res->iScreenHeight= 480;
+      res->fRefreshRate = 60;
+      res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+      break;*/
+    default:
+      return false;
+  }
+  
+  res->iScreen       = 0;
+  res->bFullScreen   = true;
+  res->iSubtitles    = (int)(0.965 * res->iHeight);
+  res->fPixelRatio   = 1.0f;
+  res->strMode       = StringUtils::Format("%dx%d @ %.2f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
+    res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+  
+  return true;
+}
diff -Nur a/xbmc/windowing/egl/EGLNativeTypeSunxi.h b/xbmc/windowing/egl/EGLNativeTypeSunxi.h
--- a/xbmc/windowing/egl/EGLNativeTypeSunxi.h	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/windowing/egl/EGLNativeTypeSunxi.h	2015-11-20 00:28:18.411517057 +0100
@@ -0,0 +1,59 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeType.h"
+class CEGLNativeTypeSunxi : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeSunxi();
+  virtual ~CEGLNativeTypeSunxi();
+  virtual std::string GetNativeName() const { return "sunxi"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+
+protected:
+  bool SetDisplayResolution(unsigned int mode);
+
+private:
+  void SetFramebufferResolution(int width, int height) const;
+  bool ModeToResolution(unsigned int mode, RESOLUTION_INFO *res) const;
+
+  std::string m_framebuffer_name;
+  int m_disp;
+};
diff -Nur a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
--- a/xbmc/windowing/egl/EGLWrapper.cpp	2015-11-02 10:54:40.000000000 +0100
+++ b/xbmc/windowing/egl/EGLWrapper.cpp	2015-11-12 20:50:36.597112788 +0100
@@ -37,6 +37,7 @@
   #include "EGLNativeTypeIMX.h"
 #endif
 #include "EGLNativeTypeAmlogic.h"
+#include "EGLNativeTypeSunxi.h"
 #include "EGLWrapper.h"
 
 #define CheckError() m_result = eglGetError(); if(m_result != EGL_SUCCESS) CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, m_result);
@@ -105,7 +106,8 @@
 #if defined(HAS_IMXVPU)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeIMX>(implementation)) ||
 #endif
-      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation))
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation)) ||
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeSunxi>(implementation))
       )
   {
     m_nativeTypes = nativeGuess;
diff -Nur a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
--- a/xbmc/windowing/egl/Makefile.in	2015-11-02 10:54:40.000000000 +0100
+++ b/xbmc/windowing/egl/Makefile.in	2015-11-12 20:15:22.693415124 +0100
@@ -2,6 +2,7 @@
 
 SRCS = WinSystemEGL.cpp
 SRCS+= EGLNativeTypeAmlogic.cpp
+SRCS+= EGLNativeTypeSunxi.cpp
 ifeq (@USE_ANDROID@,1)
 SRCS+= EGLNativeTypeAndroid.cpp
 SRCS+= EGLNativeTypeAmlAndroid.cpp
diff -Nur a/xbmc/windowing/egl/sunxi_display2.h b/xbmc/windowing/egl/sunxi_display2.h
--- a/xbmc/windowing/egl/sunxi_display2.h	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/windowing/egl/sunxi_display2.h	2015-11-18 23:01:28.529716202 +0100
@@ -0,0 +1,388 @@
+#ifndef __SUNXI_DISPLAY_H__
+#define __SUNXI_DISPLAY_H__
+
+typedef struct {unsigned char  alpha;unsigned char red;unsigned char green; unsigned char blue; }disp_color;
+typedef struct {int x; int y; unsigned int width; unsigned int height;}disp_rect;
+typedef struct {unsigned int width;unsigned int height;                   }disp_rectsz;
+typedef struct {int x; int y;                           }disp_position;
+
+typedef enum
+{
+	DISP_FORMAT_ARGB_8888                    = 0x00,//MSB  A-R-G-B  LSB
+	DISP_FORMAT_ABGR_8888                    = 0x01,
+	DISP_FORMAT_RGBA_8888                    = 0x02,
+	DISP_FORMAT_BGRA_8888                    = 0x03,
+	DISP_FORMAT_XRGB_8888                    = 0x04,
+	DISP_FORMAT_XBGR_8888                    = 0x05,
+	DISP_FORMAT_RGBX_8888                    = 0x06,
+	DISP_FORMAT_BGRX_8888                    = 0x07,
+	DISP_FORMAT_RGB_888                      = 0x08,
+	DISP_FORMAT_BGR_888                      = 0x09,
+	DISP_FORMAT_RGB_565                      = 0x0a,
+	DISP_FORMAT_BGR_565                      = 0x0b,
+	DISP_FORMAT_ARGB_4444                    = 0x0c,
+	DISP_FORMAT_ABGR_4444                    = 0x0d,
+	DISP_FORMAT_RGBA_4444                    = 0x0e,
+	DISP_FORMAT_BGRA_4444                    = 0x0f,
+	DISP_FORMAT_ARGB_1555                    = 0x10,
+	DISP_FORMAT_ABGR_1555                    = 0x11,
+	DISP_FORMAT_RGBA_5551                    = 0x12,
+	DISP_FORMAT_BGRA_5551                    = 0x13,
+
+	/* SP: semi-planar, P:planar, I:interleaved
+	 * UVUV: U in the LSBs;     VUVU: V in the LSBs */
+	DISP_FORMAT_YUV444_I_AYUV                = 0x40,//MSB  A-Y-U-V  LSB, reserved
+	DISP_FORMAT_YUV444_I_VUYA                = 0x41,//MSB  V-U-Y-A  LSB
+	DISP_FORMAT_YUV422_I_YVYU                = 0x42,//MSB  Y-V-Y-U  LSB
+	DISP_FORMAT_YUV422_I_YUYV                = 0x43,//MSB  Y-U-Y-V  LSB
+	DISP_FORMAT_YUV422_I_UYVY                = 0x44,//MSB  U-Y-V-Y  LSB
+	DISP_FORMAT_YUV422_I_VYUY                = 0x45,//MSB  V-Y-U-Y  LSB
+	DISP_FORMAT_YUV444_P                     = 0x46,//MSB  P3-2-1-0 LSB,  YYYY UUUU VVVV, reserved
+	DISP_FORMAT_YUV422_P                     = 0x47,//MSB  P3-2-1-0 LSB   YYYY UU   VV
+	DISP_FORMAT_YUV420_P                     = 0x48,//MSB  P3-2-1-0 LSB   YYYY U    V
+	DISP_FORMAT_YUV411_P                     = 0x49,//MSB  P3-2-1-0 LSB   YYYY U    V
+	DISP_FORMAT_YUV422_SP_UVUV               = 0x4a,//MSB  V-U-V-U  LSB
+	DISP_FORMAT_YUV422_SP_VUVU               = 0x4b,//MSB  U-V-U-V  LSB
+	DISP_FORMAT_YUV420_SP_UVUV               = 0x4c,
+	DISP_FORMAT_YUV420_SP_VUVU               = 0x4d,
+	DISP_FORMAT_YUV411_SP_UVUV               = 0x4e,
+	DISP_FORMAT_YUV411_SP_VUVU               = 0x4f,
+}disp_pixel_format;
+
+typedef enum
+{
+	DISP_3D_OUT_MODE_CI_1 = 0x5,//column interlaved 1
+	DISP_3D_OUT_MODE_CI_2 = 0x6,//column interlaved 2
+	DISP_3D_OUT_MODE_CI_3 = 0x7,//column interlaved 3
+	DISP_3D_OUT_MODE_CI_4 = 0x8,//column interlaved 4
+	DISP_3D_OUT_MODE_LIRGB = 0x9,//line interleaved rgb
+
+	DISP_3D_OUT_MODE_TB = 0x0,//top bottom
+	DISP_3D_OUT_MODE_FP = 0x1,//frame packing
+	DISP_3D_OUT_MODE_SSF = 0x2,//side by side full
+	DISP_3D_OUT_MODE_SSH = 0x3,//side by side half
+	DISP_3D_OUT_MODE_LI = 0x4,//line interleaved
+	DISP_3D_OUT_MODE_FA = 0xa,//field alternative
+}disp_3d_out_mode;
+
+typedef enum
+{
+	DISP_BT601  = 0,
+	DISP_BT709  = 1,
+	DISP_YCC    = 2,
+}disp_color_space;
+
+typedef enum
+{
+	DISP_CSC_TYPE_RGB        = 0,
+	DISP_CSC_TYPE_YUV1       = 1,//HDMI
+	DISP_CSC_TYPE_YUV2       = 2,//TV
+}disp_csc_type;
+
+typedef enum
+{
+	DISP_COLOR_RANGE_16_255 = 0,
+	DISP_COLOR_RANGE_0_255  = 1,
+	DISP_COLOR_RANGE_16_235 = 2,
+}disp_color_range;
+
+typedef enum
+{
+	DISP_OUTPUT_TYPE_NONE   = 0,
+	DISP_OUTPUT_TYPE_LCD    = 1,
+	DISP_OUTPUT_TYPE_TV     = 2,
+	DISP_OUTPUT_TYPE_HDMI   = 4,
+	DISP_OUTPUT_TYPE_VGA    = 8,
+}disp_output_type;
+
+typedef enum
+{
+	DISP_TV_MOD_480I                = 0,
+	DISP_TV_MOD_576I                = 1,
+	DISP_TV_MOD_480P                = 2,
+	DISP_TV_MOD_576P                = 3,
+	DISP_TV_MOD_720P_50HZ           = 4,
+	DISP_TV_MOD_720P_60HZ           = 5,
+	DISP_TV_MOD_1080I_50HZ          = 6,
+	DISP_TV_MOD_1080I_60HZ          = 7,
+	DISP_TV_MOD_1080P_24HZ          = 8,
+	DISP_TV_MOD_1080P_50HZ          = 9,
+	DISP_TV_MOD_1080P_60HZ          = 0xa,
+	DISP_TV_MOD_1080P_24HZ_3D_FP    = 0x17,
+	DISP_TV_MOD_720P_50HZ_3D_FP     = 0x18,
+	DISP_TV_MOD_720P_60HZ_3D_FP     = 0x19,
+	DISP_TV_MOD_1080P_25HZ          = 0x1a,
+	DISP_TV_MOD_1080P_30HZ          = 0x1b,
+	DISP_TV_MOD_PAL                 = 0xb,
+	DISP_TV_MOD_PAL_SVIDEO          = 0xc,
+	DISP_TV_MOD_NTSC                = 0xe,
+	DISP_TV_MOD_NTSC_SVIDEO         = 0xf,
+	DISP_TV_MOD_PAL_M               = 0x11,
+	DISP_TV_MOD_PAL_M_SVIDEO        = 0x12,
+	DISP_TV_MOD_PAL_NC              = 0x14,
+	DISP_TV_MOD_PAL_NC_SVIDEO       = 0x15,
+	DISP_TV_MOD_3840_2160P_30HZ     = 0x1c,
+	DISP_TV_MOD_3840_2160P_25HZ     = 0x1d,
+	DISP_TV_MOD_3840_2160P_24HZ     = 0x1e,
+	DISP_TV_MODE_NUM                = 0x1f,
+}disp_tv_mode;
+
+
+//FIXME:still need?
+typedef enum
+{
+	DISP_EXIT_MODE_CLEAN_ALL    = 0,
+	DISP_EXIT_MODE_CLEAN_PARTLY = 1,//only clean interrupt temply
+}disp_exit_mode;
+
+typedef enum
+{
+	DISP_BF_NORMAL        = 0,//non-stereo
+	DISP_BF_STEREO_TB     = 1 << 0,//stereo top-bottom
+	DISP_BF_STEREO_FP     = 1 << 1,//stereo frame packing
+	DISP_BF_STEREO_SSH    = 1 << 2,//stereo side by side half
+	DISP_BF_STEREO_SSF    = 1 << 3,//stereo side by side full
+	DISP_BF_STEREO_LI     = 1 << 4,//stereo line interlace
+}disp_buffer_flags;
+
+typedef enum
+{
+	LAYER_MODE_BUFFER = 0,
+	LAYER_MODE_COLOR = 1,
+}disp_layer_mode;
+
+typedef enum
+{
+	DISP_SCAN_PROGRESSIVE                 = 0,//non interlace
+	DISP_SCAN_INTERLACED_ODD_FLD_FIRST    = 1 << 0,//interlace ,odd field first
+	DISP_SCAN_INTERLACED_EVEN_FLD_FIRST   = 1 << 1,//interlace,even field first
+}disp_scan_flags;
+
+typedef struct
+{
+	unsigned int type;
+	unsigned int mode;
+}disp_output;
+
+typedef struct
+{
+	long long x;
+	long long y;
+	long long width;
+	long long height;
+}disp_rect64;
+
+typedef struct
+{
+	unsigned long long   addr[3];          /* address of frame buffer,
+																						single addr for interleaved fomart,
+																						double addr for semi-planar fomart
+																						triple addr for planar format */
+	disp_rectsz           size[3];          //size for 3 component,unit: pixels
+	unsigned int          align[3];         //align for 3 comonent,unit: bytes(align=2^n,i.e. 1/2/4/8/16/32..)
+	disp_pixel_format     format;
+	disp_color_space      color_space;      //color space
+	unsigned int          trd_right_addr[3];/* right address of 3d fb,
+																						used when in frame packing 3d mode */
+	bool                  pre_multiply;     //true: pre-multiply fb
+	disp_rect64           crop;             //crop rectangle boundaries
+	disp_buffer_flags     flags;            //indicate stereo or non-stereo buffer
+	disp_scan_flags       scan;             //scan type & scan order
+}disp_fb_info;
+
+typedef struct
+{
+	disp_layer_mode           mode;
+	unsigned char             zorder;      /*specifies the front-to-back ordering of the layers on the screen,
+											 the top layer having the highest Z value
+											 can't set zorder, but can get */
+	unsigned char             alpha_mode;  //0: pixel alpha;  1: global alpha;  2: global pixel alpha
+	unsigned char             alpha_value; //global alpha value
+	disp_rect                 screen_win;  //display window on the screen
+	bool                      b_trd_out;   //3d display
+	disp_3d_out_mode          out_trd_mode;//3d display mode
+	union {
+		unsigned int            color;       //valid when LAYER_MODE_COLOR
+		disp_fb_info            fb;          //framebuffer, valid when LAYER_MODE_BUFFER
+	};
+
+	unsigned int              id;          /* frame id, can get the id of frame display currently
+																						by DISP_LAYER_GET_FRAME_ID */
+}disp_layer_info;
+
+typedef struct
+{
+	disp_layer_info info;
+	bool enable;
+	unsigned int channel;
+	unsigned int layer_id;
+}disp_layer_config;
+
+typedef struct
+{
+    disp_color      ck_max;
+    disp_color      ck_min;
+    unsigned int    red_match_rule;//0/1:always match; 2:match if min<=color<=max; 3:match if color>max or color<min
+    unsigned int    green_match_rule;//0/1:always match; 2:match if min<=color<=max; 3:match if color>max or color<min
+    unsigned int    blue_match_rule;//0/1:always match; 2:match if min<=color<=max; 3:match if color>max or color<min
+}disp_colorkey;
+
+typedef struct
+{
+	disp_pixel_format format;
+	disp_rectsz size[3];
+	disp_rect crop;
+	unsigned long long addr[3];
+}disp_s_frame;
+
+typedef struct
+{
+	disp_rect window;  // capture window, rectangle of screen to be captured
+	                          //capture the whole screen if window eq ZERO
+	disp_s_frame out_frame;
+}disp_capture_info;
+
+typedef enum
+{
+	FB_MODE_SCREEN0 = 0,
+	FB_MODE_SCREEN1 = 1,
+	FB_MODE_SCREEN2 = 2,
+	FB_MODE_DUAL_SAME_SCREEN_TB = 3,//two screen, top buffer for screen0, bottom buffer for screen1
+	FB_MODE_DUAL_DIFF_SCREEN_SAME_CONTENTS = 4,//two screen, they have same contents;
+}disp_fb_mode;
+
+typedef struct
+{
+	disp_fb_mode       fb_mode;
+	disp_layer_mode    mode;
+	unsigned int       buffer_num;
+	unsigned int       width;
+	unsigned int       height;
+
+	unsigned int       output_width;//used when scaler mode
+	unsigned int       output_height;//used when scaler mode
+}disp_fb_create_info;
+
+typedef enum
+{
+	DISP_INIT_MODE_SCREEN0 = 0,//fb0 for screen0
+	DISP_INIT_MODE_SCREEN1 = 1,//fb0 for screen1
+	DISP_INIT_MODE_SCREEN2 = 2,//fb0 for screen1
+	DISP_INIT_MODE_TWO_DIFF_SCREEN = 3,//fb0 for screen0 and fb1 for screen1
+	DISP_INIT_MODE_TWO_SAME_SCREEN = 4,//fb0(up buffer for screen0, down buffer for screen1)
+	DISP_INIT_MODE_TWO_DIFF_SCREEN_SAME_CONTENTS = 5,//fb0 for two different screen(screen0 layer is normal layer, screen1 layer is scaler layer);
+}disp_init_mode;
+
+typedef enum
+{
+    DISP_TV_DAC_SRC_COMPOSITE       = 0,
+    DISP_TV_DAC_SRC_LUMA            = 1,
+    DISP_TV_DAC_SRC_CHROMA          = 2,
+    DISP_TV_DAC_SRC_Y               = 4,
+    DISP_TV_DAC_SRC_PB              = 5,
+    DISP_TV_DAC_SRC_PR              = 6,
+    DISP_TV_DAC_SRC_NONE            = 7,
+}disp_tv_dac_source;
+
+typedef enum
+{
+    DISP_TV_NONE    = 0,
+    DISP_TV_CVBS    = 1,
+    DISP_TV_YPBPR   = 2,
+    DISP_TV_SVIDEO  = 4,
+}disp_tv_output;
+
+typedef enum tag_DISP_CMD
+{
+	//----disp global----
+	DISP_RESERVE0 = 0x00,
+	DISP_RESERVE1 = 0x01,
+	DISP_SET_BKCOLOR = 0x03,
+	DISP_GET_BKCOLOR = 0x04,
+	DISP_SET_COLORKEY = 0x05,
+	DISP_GET_COLORKEY = 0x06,
+	DISP_GET_SCN_WIDTH = 0x07,
+	DISP_GET_SCN_HEIGHT = 0x08,
+	DISP_GET_OUTPUT_TYPE = 0x09,
+	DISP_SET_EXIT_MODE = 0x0A,
+	DISP_VSYNC_EVENT_EN = 0x0B,
+	DISP_BLANK = 0x0C,
+	DISP_SHADOW_PROTECT = 0x0D,
+	DISP_HWC_COMMIT = 0x0E,
+	DISP_DEVICE_SWITCH = 0x0F,
+	DISP_GET_OUTPUT = 0x10,
+	DISP_SET_COLOR_RANGE = 0x11,
+	DISP_GET_COLOR_RANGE = 0x12,
+
+	//----layer----
+	DISP_LAYER_ENABLE = 0x40,
+	DISP_LAYER_DISABLE = 0x41,
+	DISP_LAYER_SET_INFO = 0x42,
+	DISP_LAYER_GET_INFO = 0x43,
+	DISP_LAYER_TOP = 0x44,
+	DISP_LAYER_BOTTOM = 0x45,
+	DISP_LAYER_GET_FRAME_ID = 0x46,
+	DISP_LAYER_SET_CONFIG = 0x47,
+	DISP_LAYER_GET_CONFIG = 0x48,
+
+	//----hdmi----
+	DISP_HDMI_SUPPORT_MODE = 0xc4,
+	DISP_SET_TV_HPD = 0xc5,
+	DISP_HDMI_GET_EDID = 0xc6,
+
+	//----lcd----
+	DISP_LCD_ENABLE = 0x100,
+	DISP_LCD_DISABLE = 0x101,
+	DISP_LCD_SET_BRIGHTNESS = 0x102,
+	DISP_LCD_GET_BRIGHTNESS = 0x103,
+	DISP_LCD_BACKLIGHT_ENABLE  = 0x104,
+	DISP_LCD_BACKLIGHT_DISABLE  = 0x105,
+	DISP_LCD_SET_SRC = 0x106,
+	DISP_LCD_SET_FPS  = 0x107,
+	DISP_LCD_GET_FPS  = 0x108,
+	DISP_LCD_GET_SIZE = 0x109,
+	DISP_LCD_GET_MODEL_NAME = 0x10a,
+	DISP_LCD_SET_GAMMA_TABLE = 0x10b,
+	DISP_LCD_GAMMA_CORRECTION_ENABLE = 0x10c,
+	DISP_LCD_GAMMA_CORRECTION_DISABLE = 0x10d,
+	DISP_LCD_USER_DEFINED_FUNC = 0x10e,
+	DISP_LCD_CHECK_OPEN_FINISH = 0x10f,
+	DISP_LCD_CHECK_CLOSE_FINISH = 0x110,
+
+	//---- capture ---
+	DISP_CAPTURE_START = 0x140,//caputre screen and scaler to dram
+	DISP_CAPTURE_STOP = 0x141,
+	DISP_CAPTURE_COMMIT = 0x142,
+
+	//---enhance ---
+	DISP_ENHANCE_ENABLE = 0x180,
+	DISP_ENHANCE_DISABLE = 0x181,
+	DISP_ENHANCE_GET_EN = 0x182,
+	DISP_ENHANCE_SET_WINDOW = 0x183,
+	DISP_ENHANCE_GET_WINDOW = 0x184,
+	DISP_ENHANCE_SET_MODE = 0x185,
+	DISP_ENHANCE_GET_MODE = 0x186,
+	DISP_ENHANCE_DEMO_ENABLE = 0x187,
+	DISP_ENHANCE_DEMO_DISABLE = 0x188,
+
+	//---smart backlight ---
+	DISP_SMBL_ENABLE = 0x200,
+	DISP_SMBL_DISABLE = 0x201,
+	DISP_SMBL_GET_EN = 0x202,
+	DISP_SMBL_SET_WINDOW = 0x203,
+	DISP_SMBL_GET_WINDOW = 0x204,
+
+	//---- for test
+	DISP_FB_REQUEST = 0x280,
+	DISP_FB_RELEASE = 0x281,
+
+	DISP_MEM_REQUEST = 0x2c0,
+	DISP_MEM_RELEASE = 0x2c1,
+	DISP_MEM_GETADR = 0x2c2,
+}__DISP_t;
+
+#define FBIOGET_LAYER_HDL_0 0x4700
+#define FBIOGET_LAYER_HDL_1 0x4701
+
+#endif
+
