diff -Nur a/configure.ac b/configure.ac
--- a/configure.ac	2015-11-20 10:08:15.000000000 +0100
+++ b/configure.ac	2015-12-04 18:10:57.981925029 +0100
@@ -513,7 +513,7 @@
 
 AC_ARG_ENABLE([codec],
   [AS_HELP_STRING([--enable-codec],
-  [enable additional codecs from a list of comma separated names, (default is none, choices are amcodec, libstagefright and imxvpu)])],
+  [enable additional codecs from a list of comma separated names, (default is none, choices are amcodec, libstagefright, imxvpu and cedarx)])],
   [add_codecs=$enableval],
   [add_codecs=no])
 
@@ -1870,6 +1870,10 @@
     *libstagefright*)
         XB_ADD_CODEC([LIBSTAGEFRIGHT], [libstagefright], [$codecs])
         ;;
+    *cedarx*)
+        AC_CHECK_LIB([vdecoder], main, LIBS="$LIBS -lvdecoder -lMemAdapter", AC_MSG_ERROR($missing_library))
+        XB_ADD_CODEC([CEDARX], [cedarx], [$codecs])
+        ;;
     *imxvpu*)
       AC_CHECK_HEADER([imx-mm/vpu/vpu_wrapper.h],, AC_MSG_ERROR($missing_headers))
       AC_CHECK_LIB([vpu], main, LIBS="$LIBS -lfslvpuwrap -lvpu -lg2d", AC_MSG_ERROR($missing_library))
diff -Nur a/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp b/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
--- a/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp	2015-11-20 10:08:11.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp	2015-12-02 00:41:26.053973327 +0100
@@ -40,6 +40,7 @@
 #if defined(HAS_IMXVPU)
 #include "Video/DVDVideoCodecIMX.h"
 #endif
+#include "Video/DVDVideoCodecSunxi.h"
 #include "Video/MMALCodec.h"
 #include "Video/DVDVideoCodecStageFright.h"
 #if defined(HAS_LIBAMCODEC)
@@ -159,6 +160,11 @@
 #else
   hwSupport += "AMCodec:no ";
 #endif
+#if defined(HAS_CEDARX)
+  hwSupport += "CedarX:yes ";
+#else
+  hwSupport += "CedarX:no ";
+#endif
 #if defined(TARGET_ANDROID)
   hwSupport += "MediaCodec:yes ";
 #else
@@ -233,6 +239,13 @@
   }
 #endif
 
+#if defined(HAS_CEDARX)
+  if (!hint.software)
+  {
+    if ( (pCodec = OpenCodec(new CDVDVideoCodecSunxi(), hint, options)) ) return pCodec;
+  }
+#endif
+
 #if defined(TARGET_DARWIN_OSX)
   if (!hint.software && CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOPLAYER_USEVDA) && !g_advancedSettings.m_useFfmpegVda)
   {
diff -Nur a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h	2015-11-20 10:08:11.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h	2015-12-01 23:59:35.460348254 +0100
@@ -133,6 +133,8 @@
   unsigned int iDisplayHeight; // height of the picture without black bars
 
   ERenderFormat format;
+  
+  void *privData;
 };
 
 struct DVDVideoUserData
diff -Nur a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.cpp
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.cpp	2015-12-15 19:42:50.468676091 +0100
@@ -0,0 +1,462 @@
+	/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <math.h>
+
+#include "DVDVideoCodecSunxi.h"
+#include "DVDClock.h"
+#include "utils/log.h"
+
+#define _4CC(c1,c2,c3,c4) (((uint32_t)(c4)<<24)|((uint32_t)(c3)<<16)|((uint32_t)(c2)<<8)|(uint32_t)(c1))
+
+CDVDVideoCodecSunxi::CDVDVideoCodecSunxi() :
+  m_videoCodec(NULL),
+  m_pFormatName("cedarx-xxx"),
+  m_bitstream(NULL)
+{
+  
+}
+
+CDVDVideoCodecSunxi::~CDVDVideoCodecSunxi()
+{
+  Dispose();
+}
+
+bool CDVDVideoCodecSunxi::Open(CDVDStreamInfo &hints, CDVDCodecOptions &options)
+{
+  VConfig vConfig;
+  
+  m_hints = hints;
+  
+  memset(&m_streamInfo, 0, sizeof(m_streamInfo));
+   
+  switch (hints.codec)
+  {
+    case AV_CODEC_ID_MPEG1VIDEO:
+      m_pFormatName = "cedarx-mpeg1";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MPEG1;
+      break;
+    case AV_CODEC_ID_MPEG2VIDEO:
+    case AV_CODEC_ID_MPEG2VIDEO_XVMC:
+      m_pFormatName = "cedarx-mpeg2";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MPEG2;
+      break;
+    case AV_CODEC_ID_H263:
+      m_pFormatName = "cedarx-h263";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_H263;
+      break;
+    case AV_CODEC_ID_MPEG4:
+      switch(m_hints.codec_tag)
+      {
+      case _4CC('d','i','v','x'):
+      case _4CC('D','I','V','X'):
+        m_pFormatName = "cedarx-divx";
+        m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_DIVX4;
+        break;
+      case _4CC('D','X','5','0'):
+      case _4CC('d','x','5','0'):
+      case _4CC('D','I','V','5'):
+      case _4CC('d','i','v','5'):
+        m_pFormatName = "cedarx-divx5";
+        m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_DIVX5;
+        break;
+      case _4CC('X','V','I','D'):
+      case _4CC('x','v','i','d'):
+      case _4CC('M','P','4','V'):
+      case _4CC('m','p','4','v'):
+      case _4CC('P','M','P','4'):
+      case _4CC('F','M','P','4'):
+        m_pFormatName = "cedarx-xvid";
+        m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_XVID;
+        break;
+      default:
+        CLog::Log(LOGERROR, "CedarX : Using XVID for MPEG4 codec with tag %d.", m_hints.codec_tag);
+        m_pFormatName = "cedarx-xvid";
+        m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_XVID;
+        break;
+      }
+      break;
+    case AV_CODEC_ID_MSMPEG4V1:
+      m_pFormatName = "cedarx-mpeg4v1";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MSMPEG4V1;
+      break;
+    case AV_CODEC_ID_MSMPEG4V2:
+      m_pFormatName = "cedarx-mpeg4v2";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MSMPEG4V2;
+      break;
+    case AV_CODEC_ID_MSMPEG4V3:
+      m_pFormatName = "cedarx-divx3";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_DIVX3;
+      break;
+    case AV_CODEC_ID_FLV1:
+      m_pFormatName = "cedarx-flv1";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_SORENSSON_H263;
+      break;
+    case AV_CODEC_ID_RV10:
+    case AV_CODEC_ID_RV20:
+      m_pFormatName = "cedarx-rxg2";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_RXG2;
+      break;
+    case AV_CODEC_ID_RV30:
+    case AV_CODEC_ID_RV40:
+      m_pFormatName = "cedarx-rx";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_RX;
+      break;
+    case AV_CODEC_ID_H264:
+      m_pFormatName = "cedarx-h264";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_H264;
+      // convert h264-avcC to h264-annex-b as h264-avcC
+      // under streamers can have issues when seeking.
+      if (hints.extradata)
+      {
+        m_bitstream = new CBitstreamConverter;
+        if (!m_bitstream->Open(hints.codec, (uint8_t*)hints.extradata, hints.extrasize, true))
+        {
+          SAFE_DELETE(m_bitstream);
+        } 
+        else 
+        {
+            // make sure we do not leak the existing hints.extradata
+            free(hints.extradata);
+            hints.extrasize = m_bitstream->GetExtraSize();
+            hints.extradata = malloc(hints.extrasize);
+            memcpy(hints.extradata, m_bitstream->GetExtraData(), hints.extrasize);
+        }
+      }
+      break;
+    case AV_CODEC_ID_MJPEG:
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MJPEG;
+      m_pFormatName = "cedarx-mjpeg";
+      break;
+    case AV_CODEC_ID_WMV1:
+      m_pFormatName = "cedarx-wmv1";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_WMV1;
+      break;
+    case AV_CODEC_ID_WMV2:
+      m_pFormatName = "cedarx-wmv2";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_WMV2;
+      break;
+    case AV_CODEC_ID_VC1:
+    case AV_CODEC_ID_WMV3:
+      m_pFormatName = "cedarx-wmv3";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_WMV3;
+      m_streamInfo.bIsFramePackage = 1;
+      break;
+    case AV_CODEC_ID_AVS:
+    case AV_CODEC_ID_CAVS:
+      m_pFormatName = "cedarx-avs";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_AVS;
+      break;
+    case AV_CODEC_ID_HEVC:
+      m_pFormatName = "cedarx-h265";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_H265;
+      break;
+    case AV_CODEC_ID_VP6:
+      m_pFormatName = "cedarx-vp6";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_VP6;
+      break;
+    case AV_CODEC_ID_VP8:
+      m_pFormatName = "cedarx-vp8";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_VP8;
+      break;
+    case AV_CODEC_ID_VP9:
+      m_pFormatName = "cedarx-vp9";
+      m_streamInfo.eCodecFormat = VIDEO_CODEC_FORMAT_VP9;
+      break;
+    default:
+      CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::OpenDecoder - Codec format is not supported (%d)!", (int)hints.codec);
+      return false;
+  }
+  
+  m_streamInfo.nWidth = hints.width;
+  m_streamInfo.nHeight = hints.height;
+
+  // handle video rate
+  if((hints.rfpsscale > 0) && (hints.rfpsrate > 0))
+  {
+    // check ffmpeg r_frame_rate 1st
+    m_streamInfo.nFrameRate = hints.rfpsrate * 1000 / hints.rfpsscale; 
+  }
+  else if(hints.fpsscale > 0)
+  {
+    // then ffmpeg avg_frame_rate next
+    m_streamInfo.nFrameRate = hints.fpsrate * 1000 / hints.fpsscale; 
+  }
+  else
+  {
+    m_streamInfo.nFrameRate = hints.fpsrate * 1000;
+  }
+  
+  // extra data corrupts WMV3 video decoding
+  if((hints.extrasize != NULL) && (m_streamInfo.eCodecFormat != VIDEO_CODEC_FORMAT_WMV3))
+  {
+    m_streamInfo.pCodecSpecificData = (char*)hints.extradata;
+    m_streamInfo.nCodecSpecificDataLen = hints.extrasize;
+  }
+  
+  CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::OpenDecoder - fpsrate[%d], fpsscale[%d], rfpsrate[%d], rfpsscale[%d]",
+            hints.fpsrate, hints.fpsscale, hints.rfpsrate, hints.rfpsscale);
+  CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::OpenDecoder - nFrameRate = %d", m_streamInfo.nFrameRate);
+  CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::OpenDecoder - ExtraSize[%d]", hints.extrasize);
+  CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::OpenDecoder - AVCodecID(%d) -> CedarXID(0x%x)",
+            (int)hints.codec, m_streamInfo.eCodecFormat);
+
+  memset(&vConfig, 0, sizeof(VConfig));
+  vConfig.eOutputPixelFormat = PIXEL_FORMAT_YV12;
+  if (hints.width >= 3840 && hints.height >= 2160)
+  {
+      CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::OpenDecoder - 4K -> config drop delay frame, and enable scale down");
+      // decoder config scale down, refrence to awplayer H3 scale down when 4k
+      vConfig.bScaleDownEn = 1;
+      vConfig.nHorizonScaleDownRatio = 1;
+      vConfig.nVerticalScaleDownRatio = 1;
+  }
+
+  m_videoCodec = CreateVideoDecoder();
+  if(m_videoCodec == NULL)
+  {
+      CLog::Log(LOGERROR,"CDVDVideoCodecSunxi::OpenDecoder - CreateVideoDecoder failed!\n");
+      return false;
+  }
+  
+  InitializeVideoDecoder(m_videoCodec, &m_streamInfo, &vConfig);
+
+  // allocate a dummy DVDVideoPicture buffer.
+  // first make sure all properties are reset.
+  memset(&m_videobuffer, 0, sizeof(DVDVideoPicture));
+
+  m_videobuffer.dts = DVD_NOPTS_VALUE;
+  m_videobuffer.pts = DVD_NOPTS_VALUE;
+  m_videobuffer.format = RENDER_FMT_BYPASS;
+  m_videobuffer.color_range  = 0;
+  m_videobuffer.color_matrix = 4;
+  m_videobuffer.iFlags  = DVP_FLAG_ALLOCATED;
+  m_videobuffer.iWidth  = hints.width;
+  m_videobuffer.iHeight = hints.height;
+  m_videobuffer.privData = NULL;
+
+  m_videobuffer.iDisplayWidth  = m_videobuffer.iWidth;
+  m_videobuffer.iDisplayHeight = m_videobuffer.iHeight;
+  if (hints.aspect > 0.0 && !hints.forced_aspect)
+  {
+    m_videobuffer.iDisplayWidth  = ((int)lrint(m_videobuffer.iHeight * hints.aspect)) & -3;
+    if (m_videobuffer.iDisplayWidth > m_videobuffer.iWidth)
+    {
+      m_videobuffer.iDisplayWidth  = m_videobuffer.iWidth;
+      m_videobuffer.iDisplayHeight = ((int)lrint(m_videobuffer.iWidth / hints.aspect)) & -3;
+    }
+  }
+
+  CLog::Log(LOGINFO, "CDVDVideoCodecSunxi: Opened AllwinnerTech CedarX Codec");    
+  
+  return true;
+}
+
+void CDVDVideoCodecSunxi::Dispose(void)
+{
+  CLog::Log(LOGDEBUG,"CDVDVideoCodecSunxi::Dispose");
+  if (m_videoCodec) 
+  {
+    DestroyVideoDecoder(m_videoCodec);
+    m_videoCodec = NULL;
+  }
+}
+
+int CDVDVideoCodecSunxi::Decode(uint8_t *pData, int iSize, double dts, double pts)
+{
+  VideoPicture        *picture;
+  VideoStreamDataInfo  dataInfo;
+  char*                buf0;
+  char*                buf1;
+  int64_t              nPts = -1;
+  int                  buf0Size;
+  int                  buf1Size;
+  int                  ret;
+  int                  status;
+  
+  if (m_hints.ptsinvalid)
+    pts = DVD_NOPTS_VALUE; 
+  if (pts != DVD_NOPTS_VALUE)
+    nPts = pts;
+  else if (dts!= DVD_NOPTS_VALUE)
+    nPts = dts;
+
+  if((pData != NULL) && (iSize > 0))
+  {
+    if (m_bitstream)
+    {
+      if (!m_bitstream->Convert(pData, iSize))
+        return VC_ERROR;
+
+      pData = m_bitstream->GetConvertBuffer();
+      iSize = m_bitstream->GetConvertSize();
+    }
+  
+    ret = RequestVideoStreamBuffer(m_videoCodec, iSize, &buf0,
+                                   &buf0Size, &buf1, &buf1Size, 0);
+    if(ret < 0)
+    {
+        CLog::Log(LOGERROR,"CDVDVideoCodecSunxi::Decode - RequestVideoStreamBuffer failed");
+        return VC_ERROR;
+    }
+    
+    if(iSize > buf0Size)
+    {
+      memcpy(buf0, pData,            buf0Size);
+      memcpy(buf1, pData + buf0Size, buf1Size);
+    }
+    else
+    {
+      memcpy(buf0, pData, iSize);
+    }
+    
+    memset(&dataInfo, 0, sizeof(dataInfo));    
+    dataInfo.pData = buf0;   
+    dataInfo.nLength = iSize;
+    dataInfo.bIsFirstPart = 1;
+    dataInfo.bIsLastPart = 1;
+    dataInfo.nPts = nPts;
+    //FIXME: Is this needed?
+    dataInfo.bValid = (nPts != -1) ? 1 : 0;
+
+    ret = SubmitVideoStreamData(m_videoCodec, &dataInfo, 0);
+    if (ret != 0)
+    {
+      CLog::Log(LOGERROR, "SubmitVideoStreamData() error!");
+      return VC_ERROR;
+    }
+  }
+  
+  ret = DecodeVideoStream(m_videoCodec, 0, 0, 0, 0);
+  switch(ret)
+  {
+    case VDECODE_RESULT_FRAME_DECODED:
+    case VDECODE_RESULT_KEYFRAME_DECODED:
+      //status |= VC_PICTURE;
+      //break;
+    case VDECODE_RESULT_OK:
+    case VDECODE_RESULT_NO_FRAME_BUFFER:
+    case VDECODE_RESULT_NO_BITSTREAM:
+    case VDECODE_RESULT_CONTINUE:
+      status = VC_BUFFER;
+      break;
+    case VDECODE_RESULT_RESOLUTION_CHANGE:
+      status = VC_FLUSHED; //or VC_REOPEN?
+      break;
+    case VDECODE_RESULT_UNSUPPORTED:
+    default:
+      status = VC_ERROR;
+      break;
+  }
+  
+  //CLog::Log(LOGDEBUG, "CDVDVideoCodecSunxi::Decode - returned value: %d", ret);
+  
+  picture = RequestPicture(m_videoCodec, 0);
+  if(picture != NULL)
+  {
+    int realWidth = picture->nWidth;
+    int realHeight = picture->nHeight;
+    
+    if((picture->nBottomOffset != 0 || picture->nRightOffset != 0) &&
+        picture->nRightOffset <= picture->nLineStride)
+    {
+      realWidth = picture->nRightOffset - picture->nLeftOffset;
+      realHeight = picture->nBottomOffset - picture->nTopOffset;
+    }
+    
+    m_videobuffer.pts = (picture->nPts > 0) ? 
+      (double)picture->nPts : DVD_NOPTS_VALUE;
+    m_videobuffer.dts = DVD_NOPTS_VALUE;
+    m_videobuffer.iWidth  = realWidth;
+    m_videobuffer.iHeight = realHeight;
+    
+    m_videobuffer.iFlags = DVP_FLAG_ALLOCATED;
+    if (!picture->bIsProgressive)
+      m_videobuffer.iFlags |= DVP_FLAG_INTERLACED;
+    if (picture->bTopFieldFirst)
+      m_videobuffer.iFlags |= DVP_FLAG_TOP_FIELD_FIRST;
+    if (picture->bRepeatTopField)
+      m_videobuffer.iFlags |= DVP_FLAG_REPEAT_TOP_FIELD;
+    
+    //TODO: change this to special render
+    m_videobuffer.format = RENDER_FMT_YUV420P;
+    m_videobuffer.data[0] = (uint8_t*)picture->pData0;
+    m_videobuffer.data[1] = (uint8_t*)picture->pData2;
+    m_videobuffer.data[2] = (uint8_t*)picture->pData1;
+    m_videobuffer.iLineSize[0] = picture->nWidth;
+    m_videobuffer.iLineSize[1] = picture->nWidth / 2;
+    m_videobuffer.iLineSize[2] = picture->nWidth / 2;
+    m_videobuffer.privData = picture;
+
+    m_videobuffer.iDisplayWidth  = realWidth;
+    m_videobuffer.iDisplayHeight = realHeight;
+    if (m_hints.aspect > 1.0 && !m_hints.forced_aspect)
+    {
+      m_videobuffer.iDisplayWidth  = ((int)lrint(realHeight * m_hints.aspect)) & -3;
+      if (m_videobuffer.iDisplayWidth > realWidth)
+      {
+        m_videobuffer.iDisplayWidth  = realWidth;
+        m_videobuffer.iDisplayHeight = ((int)lrint(realWidth / m_hints.aspect)) & -3;
+      }
+    }
+    
+    status |= VC_PICTURE;
+  }
+  
+  return status;
+}
+
+void CDVDVideoCodecSunxi::Reset(void)
+{
+  if(m_videoCodec != NULL)
+  {
+    ResetVideoDecoder(m_videoCodec);
+  }
+}
+
+bool CDVDVideoCodecSunxi::ClearPicture(DVDVideoPicture* pDvdVideoPicture)
+{
+  if(pDvdVideoPicture != NULL)
+  {
+    if(pDvdVideoPicture->privData != NULL)
+    { 
+      ReturnPicture(m_videoCodec, (VideoPicture*)pDvdVideoPicture->privData);
+    }
+
+    memset(pDvdVideoPicture, 0, sizeof(*pDvdVideoPicture));
+  }
+  
+  return true;
+}
+
+bool CDVDVideoCodecSunxi::GetPicture(DVDVideoPicture* pDvdVideoPicture)
+{
+  if (m_videobuffer.iFlags & DVP_FLAG_ALLOCATED)
+  {
+    *pDvdVideoPicture = m_videobuffer;
+    return true;
+  }
+  
+  return false;
+}
+
+void CDVDVideoCodecSunxi::SetDropState(bool bDrop)
+{
+}
diff -Nur a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.h
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.h	1970-01-01 01:00:00.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecSunxi.h	2015-12-14 18:29:16.604321058 +0100
@@ -0,0 +1,54 @@
+#pragma once
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <cedarx/vdecoder.h>
+
+#include "DVDVideoCodec.h"
+#include "DVDStreamInfo.h"
+#include "utils/BitstreamConverter.h"
+
+class CDVDVideoCodecSunxi : public CDVDVideoCodec
+{
+public:
+  CDVDVideoCodecSunxi();
+  virtual ~CDVDVideoCodecSunxi();
+
+  // Required overrides
+  virtual bool Open(CDVDStreamInfo &hints, CDVDCodecOptions &options);
+  virtual void Dispose(void);
+  virtual int  Decode(uint8_t *pData, int iSize, double dts, double pts);
+  virtual void Reset(void);
+  virtual bool ClearPicture(DVDVideoPicture* pDvdVideoPicture);
+  virtual bool GetPicture(DVDVideoPicture *pDvdVideoPicture);
+  virtual void SetDropState(bool bDrop);
+  virtual const char* GetName(void) { return (const char*)m_pFormatName; }
+  
+protected:
+  int64_t       GetPlayerPts();
+  
+  DVDVideoPicture  m_videobuffer;
+  CDVDStreamInfo   m_hints;
+  VideoDecoder    *m_videoCodec;
+  VideoStreamInfo  m_streamInfo;
+  const char      *m_pFormatName;
+
+  CBitstreamConverter *m_bitstream;
+};
diff -Nur a/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in b/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in	2015-11-20 10:08:11.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in	2015-12-03 18:22:40.029096882 +0100
@@ -23,6 +23,9 @@
 ifeq (@USE_IMXVPU@,1)
 SRCS += DVDVideoCodecIMX.cpp
 endif
+ifeq (@USE_CEDARX@,1)
+SRCS += DVDVideoCodecSunxi.cpp
+endif
 ifeq (@USE_LIBAMCODEC@,1)
 SRCS += AMLCodec.cpp
 SRCS += DVDVideoCodecAmlogic.cpp
